// Generated by gencpp from file entrada_custom_msgs/mi_mensaje.msg
// DO NOT EDIT!


#ifndef ENTRADA_CUSTOM_MSGS_MESSAGE_MI_MENSAJE_H
#define ENTRADA_CUSTOM_MSGS_MESSAGE_MI_MENSAJE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace entrada_custom_msgs
{
template <class ContainerAllocator>
struct mi_mensaje_
{
  typedef mi_mensaje_<ContainerAllocator> Type;

  mi_mensaje_()
    : agv_id()
    , numero(0)  {
    }
  mi_mensaje_(const ContainerAllocator& _alloc)
    : agv_id(_alloc)
    , numero(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _agv_id_type;
  _agv_id_type agv_id;

   typedef int64_t _numero_type;
  _numero_type numero;





  typedef boost::shared_ptr< ::entrada_custom_msgs::mi_mensaje_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::entrada_custom_msgs::mi_mensaje_<ContainerAllocator> const> ConstPtr;

}; // struct mi_mensaje_

typedef ::entrada_custom_msgs::mi_mensaje_<std::allocator<void> > mi_mensaje;

typedef boost::shared_ptr< ::entrada_custom_msgs::mi_mensaje > mi_mensajePtr;
typedef boost::shared_ptr< ::entrada_custom_msgs::mi_mensaje const> mi_mensajeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::entrada_custom_msgs::mi_mensaje_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::entrada_custom_msgs::mi_mensaje_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::entrada_custom_msgs::mi_mensaje_<ContainerAllocator1> & lhs, const ::entrada_custom_msgs::mi_mensaje_<ContainerAllocator2> & rhs)
{
  return lhs.agv_id == rhs.agv_id &&
    lhs.numero == rhs.numero;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::entrada_custom_msgs::mi_mensaje_<ContainerAllocator1> & lhs, const ::entrada_custom_msgs::mi_mensaje_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace entrada_custom_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::entrada_custom_msgs::mi_mensaje_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::entrada_custom_msgs::mi_mensaje_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::entrada_custom_msgs::mi_mensaje_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::entrada_custom_msgs::mi_mensaje_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::entrada_custom_msgs::mi_mensaje_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::entrada_custom_msgs::mi_mensaje_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::entrada_custom_msgs::mi_mensaje_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1891012cb06ea16ecd99e89ba9876ef6";
  }

  static const char* value(const ::entrada_custom_msgs::mi_mensaje_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1891012cb06ea16eULL;
  static const uint64_t static_value2 = 0xcd99e89ba9876ef6ULL;
};

template<class ContainerAllocator>
struct DataType< ::entrada_custom_msgs::mi_mensaje_<ContainerAllocator> >
{
  static const char* value()
  {
    return "entrada_custom_msgs/mi_mensaje";
  }

  static const char* value(const ::entrada_custom_msgs::mi_mensaje_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::entrada_custom_msgs::mi_mensaje_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string agv_id\n"
"int64 numero\n"
;
  }

  static const char* value(const ::entrada_custom_msgs::mi_mensaje_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::entrada_custom_msgs::mi_mensaje_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.agv_id);
      stream.next(m.numero);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mi_mensaje_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::entrada_custom_msgs::mi_mensaje_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::entrada_custom_msgs::mi_mensaje_<ContainerAllocator>& v)
  {
    s << indent << "agv_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.agv_id);
    s << indent << "numero: ";
    Printer<int64_t>::stream(s, indent + "  ", v.numero);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ENTRADA_CUSTOM_MSGS_MESSAGE_MI_MENSAJE_H
