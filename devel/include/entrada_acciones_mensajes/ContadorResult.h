// Generated by gencpp from file entrada_acciones_mensajes/ContadorResult.msg
// DO NOT EDIT!


#ifndef ENTRADA_ACCIONES_MENSAJES_MESSAGE_CONTADORRESULT_H
#define ENTRADA_ACCIONES_MENSAJES_MESSAGE_CONTADORRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace entrada_acciones_mensajes
{
template <class ContainerAllocator>
struct ContadorResult_
{
  typedef ContadorResult_<ContainerAllocator> Type;

  ContadorResult_()
    : contador(0)  {
    }
  ContadorResult_(const ContainerAllocator& _alloc)
    : contador(0)  {
  (void)_alloc;
    }



   typedef int64_t _contador_type;
  _contador_type contador;





  typedef boost::shared_ptr< ::entrada_acciones_mensajes::ContadorResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::entrada_acciones_mensajes::ContadorResult_<ContainerAllocator> const> ConstPtr;

}; // struct ContadorResult_

typedef ::entrada_acciones_mensajes::ContadorResult_<std::allocator<void> > ContadorResult;

typedef boost::shared_ptr< ::entrada_acciones_mensajes::ContadorResult > ContadorResultPtr;
typedef boost::shared_ptr< ::entrada_acciones_mensajes::ContadorResult const> ContadorResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::entrada_acciones_mensajes::ContadorResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::entrada_acciones_mensajes::ContadorResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::entrada_acciones_mensajes::ContadorResult_<ContainerAllocator1> & lhs, const ::entrada_acciones_mensajes::ContadorResult_<ContainerAllocator2> & rhs)
{
  return lhs.contador == rhs.contador;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::entrada_acciones_mensajes::ContadorResult_<ContainerAllocator1> & lhs, const ::entrada_acciones_mensajes::ContadorResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace entrada_acciones_mensajes

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::entrada_acciones_mensajes::ContadorResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::entrada_acciones_mensajes::ContadorResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::entrada_acciones_mensajes::ContadorResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::entrada_acciones_mensajes::ContadorResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::entrada_acciones_mensajes::ContadorResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::entrada_acciones_mensajes::ContadorResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::entrada_acciones_mensajes::ContadorResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ca8b12a43af0ec7cb0057d704d9bb5ac";
  }

  static const char* value(const ::entrada_acciones_mensajes::ContadorResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xca8b12a43af0ec7cULL;
  static const uint64_t static_value2 = 0xb0057d704d9bb5acULL;
};

template<class ContainerAllocator>
struct DataType< ::entrada_acciones_mensajes::ContadorResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "entrada_acciones_mensajes/ContadorResult";
  }

  static const char* value(const ::entrada_acciones_mensajes::ContadorResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::entrada_acciones_mensajes::ContadorResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#result\n"
"int64 contador\n"
;
  }

  static const char* value(const ::entrada_acciones_mensajes::ContadorResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::entrada_acciones_mensajes::ContadorResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.contador);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ContadorResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::entrada_acciones_mensajes::ContadorResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::entrada_acciones_mensajes::ContadorResult_<ContainerAllocator>& v)
  {
    s << indent << "contador: ";
    Printer<int64_t>::stream(s, indent + "  ", v.contador);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ENTRADA_ACCIONES_MENSAJES_MESSAGE_CONTADORRESULT_H
